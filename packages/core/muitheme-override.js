"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _default = {
  palette: {
    primary: {
      main: '#0B2D49',
      contrastText: '#fff'
    },
    secondary: {
      main: '#B4482C',
      contrastText: '#fff'
    }
  },
  text: {
    primary: '#0000008a',
    secondary: '#262626',
    disabled: 'rgba(0, 0, 0, 0.38)',
    hint: 'rgba(0, 0, 0, 0.38)'
  },
  typography: {
    useNextVariants: true,
    body1: {
      fontSize: '0.8rem'
    },
    display1: {
      fontSize: '1.2rem',
      fontWeight: 300,
      lineHeight: '1.20588em'
    },
    title: {
      color: 'primary',
      fontSize: '1.2rem',
      fontWeight: 400,
      lineHeight: '1.20588em'
    },
    h1: {
      color: 'primary',
      fontSize: '3rem',
      fontWeight: 400,
      lineHeight: '1.5em'
    },
    caption: {
      fontStyle: 'italic'
    }
  },
  overrides: {
    MuiAppBar: {
      colorDefault: {
        backgroundColor: '#00000'
      }
    },
    MuiCard: {
      root: {
        display: 'flex',
        flexDirection: 'column',
        justifyContent: 'space-between',
        padding: 15,
        paddingBottom: 2,
        width: 'inherit',
        minHeight: 225,
        borderRadius: 15
      }
    },
    MuiCardContent: {
      root: {
        display: 'flex',
        width: 'inherit',
        flexDirection: 'column',
        wordBreak: 'break-word',
        flexGrow: 1,
        justifyContent: 'space-between',
        padding: 2,
        marginTop: 5
      }
    },
    MuiCardHeader: {
      root: {
        paddingTop: 0,
        paddingLeft: 2,
        paddingBottom: 2,
        marginTop: 10
      }
    },
    MuiCardActions: {
      root: {
        justifyContent: 'space-between',
        alignItems: 'baseline',
        padding: 0
      }
    },
    MuiChip: {
      label: {
        maxWidth: 100,
        textOverflow: 'ellipsis'
      }
    }
  }
};
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tdWl0aGVtZS1vdmVycmlkZS50c3giXSwibmFtZXMiOlsicGFsZXR0ZSIsInByaW1hcnkiLCJtYWluIiwiY29udHJhc3RUZXh0Iiwic2Vjb25kYXJ5IiwidGV4dCIsImRpc2FibGVkIiwiaGludCIsInR5cG9ncmFwaHkiLCJ1c2VOZXh0VmFyaWFudHMiLCJib2R5MSIsImZvbnRTaXplIiwiZGlzcGxheTEiLCJmb250V2VpZ2h0IiwibGluZUhlaWdodCIsInRpdGxlIiwiY29sb3IiLCJoMSIsImNhcHRpb24iLCJmb250U3R5bGUiLCJvdmVycmlkZXMiLCJNdWlBcHBCYXIiLCJjb2xvckRlZmF1bHQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJNdWlDYXJkIiwicm9vdCIsImRpc3BsYXkiLCJmbGV4RGlyZWN0aW9uIiwianVzdGlmeUNvbnRlbnQiLCJwYWRkaW5nIiwicGFkZGluZ0JvdHRvbSIsIndpZHRoIiwibWluSGVpZ2h0IiwiYm9yZGVyUmFkaXVzIiwiTXVpQ2FyZENvbnRlbnQiLCJ3b3JkQnJlYWsiLCJmbGV4R3JvdyIsIm1hcmdpblRvcCIsIk11aUNhcmRIZWFkZXIiLCJwYWRkaW5nVG9wIiwicGFkZGluZ0xlZnQiLCJNdWlDYXJkQWN0aW9ucyIsImFsaWduSXRlbXMiLCJNdWlDaGlwIiwibGFiZWwiLCJtYXhXaWR0aCIsInRleHRPdmVyZmxvdyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O2VBQWU7QUFDYkEsRUFBQUEsT0FBTyxFQUFFO0FBQ1BDLElBQUFBLE9BQU8sRUFBRTtBQUNQQyxNQUFBQSxJQUFJLEVBQUUsU0FEQztBQUVQQyxNQUFBQSxZQUFZLEVBQUU7QUFGUCxLQURGO0FBS1BDLElBQUFBLFNBQVMsRUFBRTtBQUNURixNQUFBQSxJQUFJLEVBQUUsU0FERztBQUVUQyxNQUFBQSxZQUFZLEVBQUU7QUFGTDtBQUxKLEdBREk7QUFXYkUsRUFBQUEsSUFBSSxFQUFFO0FBQ0pKLElBQUFBLE9BQU8sRUFBRSxXQURMO0FBRUpHLElBQUFBLFNBQVMsRUFBRSxTQUZQO0FBR0pFLElBQUFBLFFBQVEsRUFBRSxxQkFITjtBQUlKQyxJQUFBQSxJQUFJLEVBQUU7QUFKRixHQVhPO0FBaUJiQyxFQUFBQSxVQUFVLEVBQUU7QUFDVkMsSUFBQUEsZUFBZSxFQUFFLElBRFA7QUFFVkMsSUFBQUEsS0FBSyxFQUFFO0FBQ0xDLE1BQUFBLFFBQVEsRUFBRTtBQURMLEtBRkc7QUFLVkMsSUFBQUEsUUFBUSxFQUFFO0FBQ1JELE1BQUFBLFFBQVEsRUFBRSxRQURGO0FBRVJFLE1BQUFBLFVBQVUsRUFBRSxHQUZKO0FBR1JDLE1BQUFBLFVBQVUsRUFBRTtBQUhKLEtBTEE7QUFVVkMsSUFBQUEsS0FBSyxFQUFFO0FBQ0xDLE1BQUFBLEtBQUssRUFBRSxTQURGO0FBRUxMLE1BQUFBLFFBQVEsRUFBRSxRQUZMO0FBR0xFLE1BQUFBLFVBQVUsRUFBRSxHQUhQO0FBSUxDLE1BQUFBLFVBQVUsRUFBRTtBQUpQLEtBVkc7QUFnQlZHLElBQUFBLEVBQUUsRUFBRTtBQUNGRCxNQUFBQSxLQUFLLEVBQUUsU0FETDtBQUVGTCxNQUFBQSxRQUFRLEVBQUUsTUFGUjtBQUdGRSxNQUFBQSxVQUFVLEVBQUUsR0FIVjtBQUlGQyxNQUFBQSxVQUFVLEVBQUU7QUFKVixLQWhCTTtBQXNCVkksSUFBQUEsT0FBTyxFQUFFO0FBQ1BDLE1BQUFBLFNBQVMsRUFBRTtBQURKO0FBdEJDLEdBakJDO0FBMkNiQyxFQUFBQSxTQUFTLEVBQUU7QUFDVEMsSUFBQUEsU0FBUyxFQUFFO0FBQ1RDLE1BQUFBLFlBQVksRUFBRTtBQUNaQyxRQUFBQSxlQUFlLEVBQUU7QUFETDtBQURMLEtBREY7QUFNVEMsSUFBQUEsT0FBTyxFQUFFO0FBQ1BDLE1BQUFBLElBQUksRUFBRTtBQUNKQyxRQUFBQSxPQUFPLEVBQUUsTUFETDtBQUVKQyxRQUFBQSxhQUFhLEVBQUUsUUFGWDtBQUdKQyxRQUFBQSxjQUFjLEVBQUUsZUFIWjtBQUlKQyxRQUFBQSxPQUFPLEVBQUUsRUFKTDtBQUtKQyxRQUFBQSxhQUFhLEVBQUUsQ0FMWDtBQU1KQyxRQUFBQSxLQUFLLEVBQUUsU0FOSDtBQU9KQyxRQUFBQSxTQUFTLEVBQUUsR0FQUDtBQVFKQyxRQUFBQSxZQUFZLEVBQUU7QUFSVjtBQURDLEtBTkE7QUFrQlRDLElBQUFBLGNBQWMsRUFBRTtBQUNkVCxNQUFBQSxJQUFJLEVBQUU7QUFDSkMsUUFBQUEsT0FBTyxFQUFFLE1BREw7QUFFSkssUUFBQUEsS0FBSyxFQUFFLFNBRkg7QUFHSkosUUFBQUEsYUFBYSxFQUFFLFFBSFg7QUFJSlEsUUFBQUEsU0FBUyxFQUFFLFlBSlA7QUFLSkMsUUFBQUEsUUFBUSxFQUFFLENBTE47QUFNSlIsUUFBQUEsY0FBYyxFQUFFLGVBTlo7QUFPSkMsUUFBQUEsT0FBTyxFQUFFLENBUEw7QUFRSlEsUUFBQUEsU0FBUyxFQUFFO0FBUlA7QUFEUSxLQWxCUDtBQThCVEMsSUFBQUEsYUFBYSxFQUFFO0FBQ2JiLE1BQUFBLElBQUksRUFBRTtBQUNKYyxRQUFBQSxVQUFVLEVBQUUsQ0FEUjtBQUVKQyxRQUFBQSxXQUFXLEVBQUUsQ0FGVDtBQUdKVixRQUFBQSxhQUFhLEVBQUUsQ0FIWDtBQUlKTyxRQUFBQSxTQUFTLEVBQUU7QUFKUDtBQURPLEtBOUJOO0FBc0NUSSxJQUFBQSxjQUFjLEVBQUU7QUFDZGhCLE1BQUFBLElBQUksRUFBRTtBQUNKRyxRQUFBQSxjQUFjLEVBQUUsZUFEWjtBQUVKYyxRQUFBQSxVQUFVLEVBQUUsVUFGUjtBQUdKYixRQUFBQSxPQUFPLEVBQUU7QUFITDtBQURRLEtBdENQO0FBNkNUYyxJQUFBQSxPQUFPLEVBQUU7QUFDUEMsTUFBQUEsS0FBSyxFQUFFO0FBQ0xDLFFBQUFBLFFBQVEsRUFBRSxHQURMO0FBRUxDLFFBQUFBLFlBQVksRUFBRTtBQUZUO0FBREE7QUE3Q0E7QUEzQ0UsQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcbiAgcGFsZXR0ZToge1xuICAgIHByaW1hcnk6IHtcbiAgICAgIG1haW46ICcjMEIyRDQ5JyxcbiAgICAgIGNvbnRyYXN0VGV4dDogJyNmZmYnLFxuICAgIH0sXG4gICAgc2Vjb25kYXJ5OiB7XG4gICAgICBtYWluOiAnI0I0NDgyQycsXG4gICAgICBjb250cmFzdFRleHQ6ICcjZmZmJyxcbiAgICB9LFxuICB9LFxuICB0ZXh0OiB7XG4gICAgcHJpbWFyeTogJyMwMDAwMDA4YScsXG4gICAgc2Vjb25kYXJ5OiAnIzI2MjYyNicsXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDAsIDAsIDAsIDAuMzgpJyxcbiAgICBoaW50OiAncmdiYSgwLCAwLCAwLCAwLjM4KScsXG4gIH0sXG4gIHR5cG9ncmFwaHk6IHtcbiAgICB1c2VOZXh0VmFyaWFudHM6IHRydWUsXG4gICAgYm9keTE6IHtcbiAgICAgIGZvbnRTaXplOiAnMC44cmVtJyxcbiAgICB9LFxuICAgIGRpc3BsYXkxOiB7XG4gICAgICBmb250U2l6ZTogJzEuMnJlbScsXG4gICAgICBmb250V2VpZ2h0OiAzMDAsXG4gICAgICBsaW5lSGVpZ2h0OiAnMS4yMDU4OGVtJyxcbiAgICB9LFxuICAgIHRpdGxlOiB7XG4gICAgICBjb2xvcjogJ3ByaW1hcnknLFxuICAgICAgZm9udFNpemU6ICcxLjJyZW0nLFxuICAgICAgZm9udFdlaWdodDogNDAwLFxuICAgICAgbGluZUhlaWdodDogJzEuMjA1ODhlbScsXG4gICAgfSxcbiAgICBoMToge1xuICAgICAgY29sb3I6ICdwcmltYXJ5JyxcbiAgICAgIGZvbnRTaXplOiAnM3JlbScsXG4gICAgICBmb250V2VpZ2h0OiA0MDAsXG4gICAgICBsaW5lSGVpZ2h0OiAnMS41ZW0nLFxuICAgIH0sXG4gICAgY2FwdGlvbjoge1xuICAgICAgZm9udFN0eWxlOiAnaXRhbGljJyxcbiAgICB9LFxuICB9LFxuICBvdmVycmlkZXM6IHtcbiAgICBNdWlBcHBCYXI6IHtcbiAgICAgIGNvbG9yRGVmYXVsdDoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjMDAwMDAnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIE11aUNhcmQ6IHtcbiAgICAgIHJvb3Q6IHtcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcbiAgICAgICAgcGFkZGluZzogMTUsXG4gICAgICAgIHBhZGRpbmdCb3R0b206IDIsXG4gICAgICAgIHdpZHRoOiAnaW5oZXJpdCcsXG4gICAgICAgIG1pbkhlaWdodDogMjI1LFxuICAgICAgICBib3JkZXJSYWRpdXM6IDE1LFxuICAgICAgfSxcbiAgICB9LFxuICAgIE11aUNhcmRDb250ZW50OiB7XG4gICAgICByb290OiB7XG4gICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgd2lkdGg6ICdpbmhlcml0JyxcbiAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgIHdvcmRCcmVhazogJ2JyZWFrLXdvcmQnLFxuICAgICAgICBmbGV4R3JvdzogMSxcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcbiAgICAgICAgcGFkZGluZzogMixcbiAgICAgICAgbWFyZ2luVG9wOiA1LFxuICAgICAgfSxcbiAgICB9LFxuICAgIE11aUNhcmRIZWFkZXI6IHtcbiAgICAgIHJvb3Q6IHtcbiAgICAgICAgcGFkZGluZ1RvcDogMCxcbiAgICAgICAgcGFkZGluZ0xlZnQ6IDIsXG4gICAgICAgIHBhZGRpbmdCb3R0b206IDIsXG4gICAgICAgIG1hcmdpblRvcDogMTAsXG4gICAgICB9LFxuICAgIH0sXG4gICAgTXVpQ2FyZEFjdGlvbnM6IHtcbiAgICAgIHJvb3Q6IHtcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcbiAgICAgICAgYWxpZ25JdGVtczogJ2Jhc2VsaW5lJyxcbiAgICAgICAgcGFkZGluZzogMCxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBNdWlDaGlwOiB7XG4gICAgICBsYWJlbDoge1xuICAgICAgICBtYXhXaWR0aDogMTAwLFxuICAgICAgICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gICAgICB9LFxuICAgIH0sXG4gIH0sXG59O1xuIl19